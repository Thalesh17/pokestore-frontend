[{"C:\\projects\\pokestore-frontend\\src\\index.tsx":"1","C:\\projects\\pokestore-frontend\\src\\contexts\\shoppingCart.tsx":"2","C:\\projects\\pokestore-frontend\\src\\pages\\Home\\index.tsx":"3","C:\\projects\\pokestore-frontend\\src\\styles\\components\\components.ts":"4","C:\\projects\\pokestore-frontend\\src\\pages\\Pokemons\\index.tsx":"5","C:\\projects\\pokestore-frontend\\src\\components\\PokemonCart\\index.tsx":"6","C:\\projects\\pokestore-frontend\\src\\components\\Header\\index.tsx":"7","C:\\projects\\pokestore-frontend\\src\\pages\\Shopping\\index.tsx":"8","C:\\projects\\pokestore-frontend\\src\\pages\\ShoppingCart\\index.tsx":"9","C:\\projects\\pokestore-frontend\\src\\pages\\ModalPokemon\\index.tsx":"10","C:\\projects\\pokestore-frontend\\src\\App.tsx":"11","C:\\projects\\pokestore-frontend\\src\\styles\\global.ts":"12","C:\\projects\\pokestore-frontend\\src\\contexts\\usePokemon.tsx":"13","C:\\projects\\pokestore-frontend\\src\\components\\Routes\\index.tsx":"14","C:\\projects\\pokestore-frontend\\src\\services\\api.tsx":"15","C:\\projects\\pokestore-frontend\\src\\utils\\utils.tsx":"16","C:\\projects\\pokestore-frontend\\src\\pages\\Main\\index.tsx":"17","C:\\projects\\pokestore-frontend\\src\\components\\FilterPokemons\\index.tsx":"18","C:\\projects\\pokestore-frontend\\src\\interfaces\\models.ts":"19"},{"size":196,"mtime":1606834041953,"results":"20","hashOfConfig":"21"},{"size":2814,"mtime":1607033183148,"results":"22","hashOfConfig":"21"},{"size":1704,"mtime":1607035835247,"results":"23","hashOfConfig":"21"},{"size":617,"mtime":1606930577762,"results":"24","hashOfConfig":"21"},{"size":1364,"mtime":1606960447515,"results":"25","hashOfConfig":"21"},{"size":3381,"mtime":1607038374261,"results":"26","hashOfConfig":"21"},{"size":2878,"mtime":1606938908223,"results":"27","hashOfConfig":"21"},{"size":2111,"mtime":1607035088525,"results":"28","hashOfConfig":"21"},{"size":4509,"mtime":1607033765120,"results":"29","hashOfConfig":"21"},{"size":3442,"mtime":1607029964001,"results":"30","hashOfConfig":"21"},{"size":490,"mtime":1607036688964,"results":"31","hashOfConfig":"21"},{"size":1799,"mtime":1607037181586,"results":"32","hashOfConfig":"21"},{"size":2473,"mtime":1607028489605,"results":"33","hashOfConfig":"21"},{"size":474,"mtime":1606943869671,"results":"34","hashOfConfig":"21"},{"size":1830,"mtime":1607029215333,"results":"35","hashOfConfig":"21"},{"size":1266,"mtime":1607028224565,"results":"36","hashOfConfig":"21"},{"size":567,"mtime":1607023290401,"results":"37","hashOfConfig":"21"},{"size":969,"mtime":1606917891719,"results":"38","hashOfConfig":"21"},{"size":1933,"mtime":1607029076820,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1i8z3sn",{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\projects\\pokestore-frontend\\src\\index.tsx",[],["85","86"],"C:\\projects\\pokestore-frontend\\src\\contexts\\shoppingCart.tsx",["87","88","89"],"import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { CartItem, Pokemon, Shopping, ShoppingCart, ChildComponentProps } from '../interfaces/models';\nimport swal from 'sweetalert';\nimport moment from 'moment';\n\nconst ShoppingCartContext = createContext<ShoppingCart>({} as ShoppingCart);\n\nconst ShoppingCartProvider: React.FC = ({ children }) => {\n  \n  const [cartItems, setCartItems] = useState<CartItem[]>(\n    localStorage.getItem(\"@PokeStore:cart\") !== null ? JSON.parse(localStorage.getItem(\"@PokeStore:cart\")!) : []);\n  const [shoppings, setShoppings] = useState<Shopping[]>([]);\n\n  useEffect(() => {\n    if(localStorage.getItem(\"@PokeStore:shopping\")) {\n      setShoppings(JSON.parse(localStorage.getItem(\"@PokeStore:shopping\")!));\n    }\n  }, []);\n\n  const handleAdd = (pokemon: Pokemon): void => {\n    const carts: CartItem[] = cartItems.slice();\n    let alreadyInCart = false;\n\n    carts.forEach(item => {\n      if (item.id === pokemon.id) {\n        item.count++;\n        alreadyInCart = true;\n      }\n    });\n    if (!alreadyInCart) {\n      carts.push({ ...pokemon, count: 1, pokemon: pokemon});\n    }\n\n    setCartItems(carts);\n    localStorage.setItem(\"@PokeStore:cart\", JSON.stringify(carts));\n  }\n\n  const handleRemove = (id: string): void => {\n    let carts = cartItems.slice();\n\n    carts.filter(item => {\n      if(item.id == id) {\n        \n        if(item.count < 2) {\n          carts = carts.filter(item2 => item2.id !== item.id);\n        }else{\n          --item.count;\n        }\n      }\n    });\n\n    setCartItems(carts);\n    localStorage.setItem(\"@PokeStore:cart\", JSON.stringify(carts));\n  }\n\n  const handleRemoveAllItems = (): void => {\n    setCartItems([]);\n    localStorage.removeItem(\"@PokeStore:cart\");\n  }\n\n  const handleSaveShopping = (): void => {\n        let shoppingsData = shoppings.slice(), \n            randomId = Math.floor(1000 + Math.random() * 9000),\n            shopping: Shopping = { id: randomId, createDate: moment().format(\"L\"), items: cartItems };\n\n        shoppingsData.push(shopping);\n        setShoppings(shoppingsData);\n        localStorage.setItem(\"@PokeStore:shopping\", JSON.stringify(shoppingsData));\n      \n        swal({\n          icon: \"success\",\n          title: `Pedido NÂº #${shopping.id}. Sua compra foi realizada com sucesso`,\n          text: 'Confira na sua aba de Pedidos.',\n          timer: 3000\n        });\n\n        handleRemoveAllItems();\n  }\n\n  return (\n    <ShoppingCartContext.Provider value={{\n      cartItems,\n      shoppings,\n      handleAdd,\n      handleRemove,\n      handleRemoveAllItems,\n      handleSaveShopping,\n    }}>\n      {children}\n    </ShoppingCartContext.Provider>\n  )\n};\n\nfunction useCart() {\n  return useContext(ShoppingCartContext);\n}\n\nexport { ShoppingCartProvider, useCart, ShoppingCartContext };","C:\\projects\\pokestore-frontend\\src\\pages\\Home\\index.tsx",[],"C:\\projects\\pokestore-frontend\\src\\styles\\components\\components.ts",[],"C:\\projects\\pokestore-frontend\\src\\pages\\Pokemons\\index.tsx",[],"C:\\projects\\pokestore-frontend\\src\\components\\PokemonCart\\index.tsx",[],"C:\\projects\\pokestore-frontend\\src\\components\\Header\\index.tsx",["90","91"],"import React, { useState, useEffect, useContext } from 'react';\nimport { usePokemons } from '../../contexts/usePokemon';\nimport { Link } from 'react-router-dom';\nimport { CSSTransition } from \"react-transition-group\";\nimport logoImg from '../../assets/pokemon_logo.svg';\nimport pokeball from '../../assets/pokeball.svg';\nimport \"./styles.css\";\n\nconst Header: React.FC = () => {\n  const { config, getConfigs, getConfig, handleSaveConfig } = usePokemons();\n  const [selected, setSelected] = useState<string>('');\n  const [isNavVisible, setNavVisibility] = useState(false);\n  const [isSmallScreen, setIsSmallScreen] = useState(false);\n\n  useEffect(() => {\n    let configStorage = localStorage.getItem('@PokeStore:config');\n    setSelected(configStorage ? configStorage : JSON.stringify(config));\n  }, [])\n\n  const renderConfigs = () => {\n    return getConfigs().map(config => <option key={config.type} value={JSON.stringify(config)}>{config.name}</option>)\n  }\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(max-width: 698px)\");\n    mediaQuery.addListener(handleMediaQueryChange);\n    handleMediaQueryChange(mediaQuery);\n\n    return () => {\n      mediaQuery.removeListener(handleMediaQueryChange);\n    };\n  }, []);\n\n  const handleMediaQueryChange = (mediaQuery: any) => {\n    if (mediaQuery.matches) {\n      setIsSmallScreen(true);\n    } else {\n      setIsSmallScreen(false);\n    }\n  };\n\n  const toggleNav = () => {\n    setNavVisibility(!isNavVisible);\n  };\n\n  return (\n    <header className={`${getConfig().color.primary} Header`}>\n      <Link to='/main' className=\"nav-link link_navbar\">\n        <img\n          width={150}\n          height={50}\n          className=\"d-inline-block align-top\"\n          alt=\"Pokemon logo\"\n          src={logoImg}\n        />\n      </Link>\n      <CSSTransition\n        in={!isSmallScreen || isNavVisible}\n        timeout={350}\n        classNames=\"NavAnimation\"\n        unmountOnExit\n      >\n        <nav className={`nav ${getConfig().color.primary}`}>\n          <Link to='/' className=\"nav-link link_navbar\">Home</Link>\n          <Link to='/shoppings' className=\"nav-link link_navbar\">Pedidos</Link>\n          <div className=\"justify_select\">\n            <div className=\"text_select\">\n              Trocar Loja:\n            </div>\n            <select\n              onChange={(e) => {\n                handleSaveConfig(JSON.parse(e.target.value));\n                setSelected(e.target.value)\n              }}\n              value={selected}>\n              {renderConfigs()}\n            </select>\n          </div>\n        </nav>\n      </CSSTransition>\n      <button onClick={toggleNav} className=\"pokeball\">\n        <img\n          width={130}\n          height={50}\n          className=\"d-inline-block align-top\"\n          alt=\"Pokemon logo\"\n          src={pokeball}\n        />\n      </button>\n    </header>\n  )\n}\n\nexport default Header;","C:\\projects\\pokestore-frontend\\src\\pages\\Shopping\\index.tsx",[],"C:\\projects\\pokestore-frontend\\src\\pages\\ShoppingCart\\index.tsx",[],"C:\\projects\\pokestore-frontend\\src\\pages\\ModalPokemon\\index.tsx",["92","93","94"],"import React, { useState, useEffect, Props } from 'react';\r\nimport { useCart } from '../../contexts/shoppingCart';\r\nimport { usePokemons } from '../../contexts/usePokemon';\r\nimport { ModalPokemonProps } from '../../interfaces/models';\r\nimport { numberFormatBRL } from '../../utils/utils';\r\nimport { Button } from '../../styles/components/components';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport 'react-responsive-modal/styles.css';\r\nimport \"./styles.css\";\r\n\r\nconst ModalPokemon: React.FC<ModalPokemonProps> = ({isOpen, closeModal, pokemon}) => {\r\n    const Zoom = require('react-reveal/Zoom');\r\n    const Fade = require('react-reveal/Fade');\r\n    const { handleAdd } = useCart();\r\n    const { config } = usePokemons();\r\n\r\n    return (\r\n        <Modal open={isOpen} onClose={() => closeModal()} center>\r\n            <div className=\"content-modal\">\r\n                <div className={`pokemon-image ${config.color.primary}`}>\r\n                    <Zoom>\r\n                        <img \r\n                            width={200}\r\n                            height={200}\r\n                            src={pokemon.img} \r\n                            alt={pokemon.name}\r\n                        />\r\n                    </Zoom>\r\n                </div>\r\n                <Fade>\r\n                <div className=\"pokemon-descriptions\">\r\n                    <div className=\"content-name-price\">\r\n                        <h5 className=\"text-black\">{pokemon.name}</h5>\r\n                        <h5 className=\"text-black\">{numberFormatBRL(parseFloat(pokemon.price))}</h5>\r\n                    </div>\r\n                    <div className=\"body\">\r\n                        {pokemon.types.map(type=> (\r\n                        <span className={type.name}>{type.name}</span>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"body weight-height\">\r\n                        <div>\r\n                            <h5>Tamanho</h5>\r\n                            <div className=\"flex-gap\">\r\n                                <h5>{pokemon.height}</h5>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <h5>Peso</h5>\r\n                            <div className=\"flex-gap\">\r\n                                <h5>{pokemon.weight}</h5>\r\n                            </div>\r\n                        </div>\r\n                    </div>                    \r\n                    <div className=\"body\">\r\n                        <h5>Movimentos</h5>\r\n                        <div className=\"flex-gap\">\r\n                            {pokemon.moves.map(type=> (\r\n                                <h5>{type.name}</h5>\r\n                            ))}\r\n                        </div>\r\n                    </div>                          \r\n                    <div className=\"content-btn\">\r\n                        <Button\r\n                            onClick={() => closeModal()}\r\n                            className={`${config.color.secondary} btn-back`}>Voltar\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => handleAdd(pokemon)}\r\n                            className={`btn-add`}>Adicionar\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                </Fade>\r\n               \r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalPokemon;","C:\\projects\\pokestore-frontend\\src\\App.tsx",[],"C:\\projects\\pokestore-frontend\\src\\styles\\global.ts",[],"C:\\projects\\pokestore-frontend\\src\\contexts\\usePokemon.tsx",["95"],"import React, { createContext, useEffect, useState, useContext } from 'react';\nimport { Config, ContextPokemon, PokemonUrl } from '../interfaces/models';\nimport api from '../services/api';\nimport { useCart } from './shoppingCart';\n\nconst PokemonContext = createContext<ContextPokemon>({} as ContextPokemon);\n\nconst PokemonProvider: React.FC = ({ children }) => {\n  const { handleRemoveAllItems } = useCart();\n\n  const [pokemons, setPokemons] = useState<PokemonUrl[] | []>([]);\n  const [refreshData, setRefreshData] = useState<boolean>(false);\n  const [config, setConfig] = useState<Config>(localStorage.getItem('@PokeStore:config') ?\n    JSON.parse(localStorage.getItem('@PokeStore:config') || '{}') : {\n      color: 'type-water',\n      type: '11',\n      name: 'Water',\n      value: 'water'\n    });\n\n  useEffect(() => {\n    const getPokemonsByType = async () => {\n      await findPokemons();\n    }\n\n    getPokemonsByType();\n  }, [refreshData]);\n\n  const findPokemons = async (): Promise<PokemonUrl[]> => {\n    let pokemons = await api.getPokemonsByType(config.type);\n    setPokemons(pokemons);\n    return pokemons;\n  }\n  \n  const handleSaveConfig = async (values: Config): Promise<void> => {\n    setConfig(values);\n    localStorage.setItem('@PokeStore:config', JSON.stringify(values));\n    setRefreshData(true);\n    setPokemons([]);\n    handleRemoveAllItems();\n    setPokemons(await api.getPokemonsByType(values.type));\n  }\n\n  const getConfigs = (): Config[] => {\n    return [\n      {\n        color: {\n          primary: 'type-water',\n          secondary: 'type-water-secondary'\n        },\n        name: 'Ãgua',\n        value: 'water',\n        type: '11'\n      },\n      {\n        color: {\n          primary: 'type-fire',\n          secondary: 'type-fire-secondary'\n        },\n        name: 'Fogo',\n        value: 'fire',\n        type: '10'\n      },\n      {\n        color: {\n          primary: 'type-dragon',\n          secondary: 'type-dragon-secondary'\n        },\n        name: 'DragÃ£o',\n        value: 'dragon',\n        type: '16'\n      },\n    ];\n  }\n  const getConfig = (): Config => {\n    return config;\n  }\n\n  return (\n    <PokemonContext.Provider value={{\n      pokemons: pokemons,\n      config: config,\n      findPokemons,\n      getConfigs,\n      getConfig,\n      handleSaveConfig\n    }}>\n      {children}\n    </PokemonContext.Provider>\n  )\n};\n\nfunction usePokemons() {\n  return useContext(PokemonContext);\n}\n\nexport { PokemonProvider, usePokemons, PokemonContext };","C:\\projects\\pokestore-frontend\\src\\components\\Routes\\index.tsx",[],"C:\\projects\\pokestore-frontend\\src\\services\\api.tsx",["96"],"/* eslint-disable import/no-anonymous-default-export */\nimport React from 'react';\nimport { Pokemon, PokemonUrl } from \"../interfaces/models\";\nimport axios from \"axios\";\nimport { randomNumber, capitalize } from \"../utils/utils\";\nconst api = axios.create();\n\nconst url = `https://pokeapi.co/api/v2`;\n\nexport default {\n    async getPokemonsByType(type: string) : Promise<PokemonUrl[] | []> {\n        let pokemons: PokemonUrl[] = [];\n\n        await api.get(`${url}/type/${type}`).then(response => {\n            response.data.pokemon.forEach((poke: any) => {\n                pokemons.push({\n                    id: poke.id,\n                    name: capitalize(poke.pokemon.name),\n                    url: poke.pokemon.url,\n                });\n            })\n        })\n\n        return pokemons;\n    },\n    async getPokemonByUrl(url: string): Promise<Pokemon> {\n        var pokemon: Pokemon = {id: '',name: '',img: '',price: '', types: [], height: '', moves: [], weight: ''};\n\n        await api.get(url).then(response => {\n            pokemon = {\n                id: response.data.id, \n                name: capitalize(response.data.name), \n                img: !response.data.sprites.other.dream_world.front_default ?\n                response.data.sprites.front_default : response.data.sprites.other.dream_world.front_default,\n                price: randomNumber(),\n                height: response.data.height,\n                weight: response.data.weight,\n                moves: response.data.moves.slice(0, 3).map((r: any) => {\n                    return { name: r.move.name, url: r.move.url\n                }}),\n                types: response.data.types.slice(0, 3).map((r: any) => {\n                    return { name: r.type.name, url: r.type.url\n                }})\n            }\n        });\n\n        return pokemon;\n    }\n\n\n}","C:\\projects\\pokestore-frontend\\src\\utils\\utils.tsx",[],"C:\\projects\\pokestore-frontend\\src\\pages\\Main\\index.tsx",["97","98"],"import React, {useState, useEffect} from 'react';\nimport Pokemons from '../Pokemons';\nimport ShoppingCart from '../ShoppingCart';\nimport \"./styles.css\";\nimport Header from '../../components/Header';\nimport { Container } from '../../styles/components/components';\n\nconst Main: React.FC = () => {\n    return (\n        <>\n            <Header/>\n             <Container>\n                <div className=\"content\">\n                    <Pokemons />\n                    <ShoppingCart />\n                </div>\n            </Container>\n        </>\n    )\n}\n\nexport default Main;","C:\\projects\\pokestore-frontend\\src\\components\\FilterPokemons\\index.tsx",[],"C:\\projects\\pokestore-frontend\\src\\interfaces\\models.ts",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":2,"column":53,"nodeType":"105","messageId":"106","endLine":2,"endColumn":72},{"ruleId":"107","severity":1,"message":"108","line":41,"column":23,"nodeType":"109","messageId":"110","endLine":41,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":42,"column":18,"nodeType":"113","messageId":"114","endLine":42,"endColumn":20},{"ruleId":"103","severity":1,"message":"115","line":1,"column":38,"nodeType":"105","messageId":"106","endLine":1,"endColumn":48},{"ruleId":"116","severity":1,"message":"117","line":18,"column":6,"nodeType":"118","endLine":18,"endColumn":8,"suggestions":"119"},{"ruleId":"103","severity":1,"message":"120","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":25},{"ruleId":"103","severity":1,"message":"121","line":1,"column":27,"nodeType":"105","messageId":"106","endLine":1,"endColumn":36},{"ruleId":"103","severity":1,"message":"122","line":1,"column":38,"nodeType":"105","messageId":"106","endLine":1,"endColumn":43},{"ruleId":"116","severity":1,"message":"123","line":27,"column":6,"nodeType":"118","endLine":27,"endColumn":19,"suggestions":"124"},{"ruleId":"103","severity":1,"message":"125","line":2,"column":8,"nodeType":"105","messageId":"106","endLine":2,"endColumn":13},{"ruleId":"103","severity":1,"message":"120","line":1,"column":16,"nodeType":"105","messageId":"106","endLine":1,"endColumn":24},{"ruleId":"103","severity":1,"message":"121","line":1,"column":26,"nodeType":"105","messageId":"106","endLine":1,"endColumn":35},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"@typescript-eslint/no-unused-vars","'ChildComponentProps' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'config'. Either include it or remove the dependency array.","ArrayExpression",["128"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'Props' is defined but never used.","React Hook useEffect has a missing dependency: 'findPokemons'. Either include it or remove the dependency array.",["129"],"'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [config]",{"range":"134","text":"135"},"Update the dependencies array to be: [findPokemons, refreshData]",{"range":"136","text":"137"},[798,800],"[config]",[929,942],"[findPokemons, refreshData]"]